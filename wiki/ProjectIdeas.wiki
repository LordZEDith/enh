#summary Ideas that haven't even gotten to the "mkdir" stage

= Project ideas =

These are various project ideas I've had but haven't done much/any work on.

== How (Software) Stuff Works ==

A tour (with minimalist implementations) of the basic bits of software:
  * ARM emulator (to give an overview of how a nice processor works).
  * ARM assembler/disassembler.
  * BASIC interpreter (or compiler, or both?).
  * higher-level VM?
  * a Unix shell?
  * anything else interesting enough? (should be non-trivial yet practical.)
  * what implementation language? C++ or Java?

== p9term ==

A reimplementation of Plan 9's 8.5 windows, in Java using PTextArea, looking like it belongs in 2008 rather than 1988.
  * commit prototype i have; it's useless but good-looking (should go far!).
  * how best to deal with tab completion?
  * command-line history?
  * color's probably quite easy; some visual distinction for stderr?
  * use control-c and so on for editing; esc for "interrupt".
  * getting Bash to behave?
  * any problems surrounding job control?
  * Plan 9-like "noscroll mode" where the default assumption is that you want to read command output, not watch it fly past.

== v8script ==

Use [http://code.google.com/p/v8 v8] and add just enough library support to use JavaScript as a Unix command-line scripting language like Ruby.
  * POSIX stuff.
  * convenient file i/o.
  * convenient subprocess handling.
  * anything else? why hasn't JavaScript already been co-opted like this?

Obvious problems with this being that (a) I don't know much JavaScript and (b) don't much like what I do know.

== v8jam ==

Any benefit to using the [http://code.google.com/p/v8 v8] GC in jam? How about the JIT? Jam starts up very fast, and is fast as interpreters go, but it's seriously slow compared to HotSpot/GCJ generated code.